<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[跑马灯实验]]></title>
    <url>%2F2019%2F03%2F26%2F%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84%E8%B7%91%E9%A9%AC%E7%81%AF%E5%AE%9E%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[​ STM32 最简单的外设莫过于 IO 口的高低电平控制了， 本章将通过一个经典的跑马灯程序，带大家开启 STM32F1 之旅，通过本章的学习，你将了解到 STM32F1 的 IO 口作为输出使用的方法。在本章中，我们将通过代码控制无线传感器网络实验平台 TDL-02 开发板上的两个 LED：DS1 和 DS2 交替闪烁，实现类似跑马灯的效果。 本章分为如下四个小节： 1、 LED.c 文件2、 LED.h 文件3、 main.c文件4、下载 一、LED.c 文件​ STM32 的 IO 口相比 51 而言要复杂得多，所以使用起来也困难很多。首先 STM32 的 IO 口可以由软件配置成如下 8 种模式： ​ 1、输入浮空​ 2、输入上拉​ 3、输入下拉​ 4、模拟输入​ 5、开漏输出​ 6、推挽输出​ 7、推挽式复用功能​ 8、开漏复用功能 ​ 对于GPIO端口的设置主要在下面的结构体中： 1234&#123; uint16_t GPIO_Pin; GPIOSpeed_TypeDef GPIO_Speed; GPIOMode_TypeDef GPIO_Mode;&#125;GPIO_InitTypeDef; ​ 下面我们通过一个 GPIO 初始化实例来讲解这个结构体的成员变量的含义。通过初始化结构体初始化 GPIO 的常用格式是： 123GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_5; //LED0--&gt;PE.6 LED1--&gt;PE.5GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //推挽输出GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; //IO口输出速度为50MHz ​ 但是一定要注意的是所使用的外设或者是GPIO端口在进行配置之前一定要使能时钟 1RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE,ENABLE); //使能PE端口时钟 ​ 上面代码的意思是设置 GPIOE 的第 5 个端口为推挽输出模式，同时速度为 50M。从上面初始化代码可以看出，结构体 GPIO_InitStructure 的第一个成员变量 GPIO_Pin 用来设置是要初始化哪个或者哪些 IO 口；第二个成员变量 GPIO_Mode 是用来设置对应 IO 端口的输出输入模式，这些模式是上面我们讲解的 8 个模式，在 MDK 中是通过一个枚举类型定义的： 12345678910typedef enum&#123; GPIO_Mode_AIN = 0x0, //模拟输入GPIO_Mode_IN_FLOATING = 0x04, //浮 空 输 入GPIO_Mode_IPD = 0x28, //下拉输入GPIO_Mode_IPU = 0x48, //上拉输入GPIO_Mode_Out_OD = 0x14, //开漏输出GPIO_Mode_Out_PP = 0x10, //通用推挽输出GPIO_Mode_AF_OD = 0x1C, //复用开漏输出GPIO_Mode_AF_PP = 0x18 //复用推挽&#125;GPIOMode_TypeDef; ​ 第三个参数是 IO 口速度设置，有三个可选值，在 MDK 中同样是通过枚举类型定义： 123456typedef enum&#123;GPIO_Speed_10MHz = 1,GPIO_Speed_2MHz,GPIO_Speed_50MHz&#125;GPIOSpeed_TypeDef; ​ 接下来就是调用库函数里的GPIO_Init（）；进行GPIO的初始化。 12GPIO_Init(GPIOE,&amp;GPIO_InitStructure); //根据设定参数初始化（GPIOE6,GPIOE5） ​ 再调用GPIO_SetBits（）函数将PE5和PE6设置设置为高电平（共阳极即为 ‘0’点亮）。 1GPIO_SetBits(GPIOE,GPIO_Pin_6 | GPIO_Pin_5); ​ 这样的话我们的LED.c这个文件就写好了。同时我们也大致的了解了一下关于GPIO端口的配置要注意的模式，输出速度，以及引脚，这里需要注意的是引脚只有在设置为输出模式的时候是会通过来设置这个引脚的具体的输出速度。 1GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; //IO口输出速度为50MHz 二、LED.h 文件1234567891011#ifndef LED_H#define LED_H#include &quot;sys.h&quot;#define LED0 PEout(6)#define LED1 PEout(5)void LED_Init(void);#endif ​ 这段代码里面最关键就是 2 个宏定义： 这里使用的是位带操作来实现操作某个 IO 口的 1 个位的 。 12#define LED0 PEout(6)// DS1#define LED1 PEout(5)// DS2 ​ 库函数操作方法如下： 12GPIO_SetBits(GPIOE, GPIO_Pin_6);//设置 GPIOE.6 输出 1,等同 LED0=1;GPIO_ResetBits (GPIOE, GPIO_Pin_6);//设置 GPIOE.6 输出 0,等同 LED0=0; ​ 直接操作寄存器BRR 和 BSRR 的方式来操作 IO 口输出高低电平，方法如下： 12GPIOE-&gt;BRR=GPIO_Pin_6; //设置 GPIOE.6 输出 1,等同 LED0=1;GPIOE-&gt;BSRR=GPIO_Pin_6; //设置 GPIOE.6 输出 0,等同 LED0=0; 三、main.c​ 在 main 函数里面编写如下代码： 123456789101112131415161718#include &quot;stm32f10x.h&quot;#include &quot;delay.h&quot;#include &quot;led.h&quot;int main ( void )&#123; delay_init(); LED_Init (); while(1) &#123; LED0 = 0; LED1 = 1; delay_ms( 300 ); LED0 = 1; LED1 = 0; delay_ms( 300 ); &#125;&#125; ​ 代码包含了#include “led.h”这句，使得 LED0、 LED1、 LED_Init 等能在 main()函数里被调用。这里我们需要重申的是，在固件库 V3.5 中，系统在启动的时候会调用 system_stm32f10x.c 中的函数 SystemInit()对系统时钟进行初始化，在时钟初始化完毕之后会调用 main()函数。 所以我们不需要再在 main()函数中调用 SystemInit()函数。当然如果有需要重新设置时钟系统，可以写自己的时钟设置代码， SystemInit()只是将时钟系统初始化为默认状态。main()函数非常简单，先调用 delay_init()初始化延时，接着就是调用 LED_Init()来初始化GPIOE.6 和 GPIOE.5 为输出。最后在死循环里面实现 LED0 和 LED1 交替闪烁，间隔为 300ms。上面是通过位带操作实现的 IO 操作， 对于通过调用库函数以及直接操作寄存器来实现 LED控制的方法， 在我们 main.c 文件中我们已经注释掉， 大家可以取消注释分别来测试这两种方法，实际效果是一模一样的。 ​ 接下我们点击编译工程就能看到程序编译是没有问题的，如下图所示： 123456789101112131415161718192021Build started: Project: 1_LED*** Using Compiler &apos;V5.06 update 6 (build 750)&apos;, folder: &apos;D:\Program\Keil5\ARM\ARMCC\Bin&apos;Build target &apos;LED&apos;compiling main.c...compiling stm32f10x_it.c...compiling LED.c...compiling system_stm32f10x.c...compiling core_cm3.c...assembling startup_stm32f10x_hd.s...compiling usart.c...compiling delay.c...compiling sys.c...compiling misc.c...compiling stm32f10x_gpio.c...compiling stm32f10x_rcc.c...compiling stm32f10x_usart.c...linking...Program Size: Code=1488 RO-data=336 RW-data=32 ZI-data=2656 FromELF: creating hex file...&quot;..\OBJ\LED.axf&quot; - 0 Error(s), 0 Warning(s).Build Time Elapsed: 00:00:03 ​ 最后我们下载程序到自己的开发板验证程序结果。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>物联网</tag>
      </tags>
  </entry>
</search>
